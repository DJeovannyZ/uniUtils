#!/bin/bash

defaultPath=$(cat "$HOME/.config/uniUtils/default_path.txt")
rclonePath="Universidad"
selectedDir=
nameSelectedDir=
selectedFiles=()
sameDir=

function registerSubject {
  read -p "Ingrese el nombre de la Asignatura: " nameSubject
  read -p "Ingrese el numero de Unidades de $nameSubject: " num
  read -p "Ingrese el numero de Semanas para cada Unidad de $nameSubject: " num2
  addSubject "$nameSubject"
  echo "Directorio para $nameSubject Creado"
  numUnits=$((num + 1))
  numWeeks=$((num2 + 1))
  for ((i = 1; i < numUnits; i++)); do
    unit="Unidad $i"
    addDirToSubject "$nameSubject" "$unit"
    echo "Directorio de la Unidad $i Creada para $nameSubject"
  done
  addDirToSubject "$nameSubject" "Generalidades $nameSubject"
  echo "Directorio Generalidades $nameSubject Creado"

  for ((i = 1; i < $numUnits; i++)); do
    unit="Unidad $i"
    for ((j = 1; j < $numWeeks; j++)); do
      week="Semana $j"
      addDirToUnit "$nameSubject" "$unit" "$week"
      echo "Directorio para la Semana $j de la Unidad $i creado en $nameSubject"
    done
    addDirToUnit "$nameSubject" "$unit" "Examenes"
    echo "Directorio de Examenes para la Unidad $i creado en $nameSubject"
    addDirToUnit "$nameSubject" "$unit" "Tareas"
    echo "Directorio de Tareas para la Unidad $i creado en $nameSubject"
    addDirToUnit "$nameSubject" "$unit" "Generalidades"
    echo "Directorio de Generalidades para la Unidad $i creado en $nameSubject"
  done
  echo "Asignatura "$nameSubject" Registrada en $defaultPath y en google Drive: Universidad/"
}

function addSubject {
  pathSubject="$defaultPath/$1"
  rcloneSubject="$rclonePath/$1"
  mkdir -p "$pathSubject"
  rclone mkdir gdrive:"$rcloneSubject"
}

function addDirToSubject {
  nameSubject="$1"
  nameDir="$2"
  pathDirToSubject="$defaultPath/$nameSubject"
  pathDirRcloneToSubject="$rclonePath/$nameSubject"
  if [ -d "$pathDirToSubject" ]; then
    mkdir -p "$pathDirToSubject/$nameDir"
    rclone mkdir gdrive:"$pathDirRcloneToSubject/$nameDir"
  else
    echo "La asignatura no existe"
  fi
}

function addDirToUnit {
  nameSubject="$1"
  nameUnit="$2"
  nameDir="$3"
  pathDirToUnit="$defaultPath/$nameSubject/$nameUnit"
  pathDirRcloneToUnit="$rclonePath/$nameSubject/$nameUnit"
  if [ -d "$pathDirToSubject" ]; then
    mkdir -p "$pathDirToUnit/$nameDir"
    rclone mkdir gdrive:"$pathDirRcloneToUnit/$nameDir"
  else
    echo "La $nameUnit dentro de $nameSubject no existe"
  fi
}

function openDocuments {
  echo "Seleccione una Asignatura"
  selectDir "$defaultPath"
  dirSelected="$selectedDir"
  break_loop=false
  while [[ "$break_loop" == "false" ]]; do
    files=()
    dirs=()
    while IFS= read -r entry; do
      if [[ -d "$entry" ]]; then
        if [[ "$entry" != "$dirSelected" && "$entry" != "$dirSelected/." && "$entry" != "$dirSelected/.." ]]; then
          dirs+=("$entry")
        fi
      elif [[ -f "$entry" ]]; then
        files+=("$entry")
      fi
    done < <(find "$dirSelected" -maxdepth 1)
    if [[ ${#files[@]} -gt 0 && ${#dirs[@]} -eq 0 ]]; then
      selectFiles "$dirSelected"
      break_loop=true
    elif [[ ${#dirs[@]} -gt 0 && ${#files[@]} -eq 0 ]]; then
      selectDir "$dirSelected"
      dirSelected="$selectedDir"
    elif [[ ${#files[@]} -eq 0 && ${#dirs[@]} -eq 0 ]]; then
      echo "No hay archivos ni directorios en $dirSelected"
      break_loop=true
    else
      if [[ "$sameDir" == "false" ]]; then
        selectDir "$dirSelected" 1
        dirSelected="$selectedDir"
      else
        selectFiles "$dirSelected"
        break
      fi
    fi
  done

  declare -A apps=(
    ["pdf"]="brave"
    ["pptx"]="brave"
    ["mkv"]="vlc"
    ["mp4"]="vlc"
    ["jpg"]="mirage"
    ["png"]="mirage"
    ["jpeg"]="mirage"
  ) 
   
  declare -A file_lists
   
  declare -a docsDrive=() # declara un array vacío para almacenar los archivos con extensión .doc, .docx, .xlsx

  for file in "${selectedFiles[@]}"
  do
    extension="${file##*.}"
    if [[ "$extension" == "doc" || "$extension" == "docx" || "$extension" == "xlsx" ]]; then
      fileDrive=$(echo "$file" | sed "s|$HOME/||")
      docsDrive+=("$fileDrive") # agrega el archivo al array de archivos .doc, .docx, .xlsx
    elif [[ -n "${apps[$extension]}" ]]; then
      file_lists[$extension]+="\"$file\"\n"
    else
      echo "No hay aplicación predeterminada para el archivo $file"
    fi
  done
   
  for extension in "${!file_lists[@]}"
  do
    files="${file_lists[$extension]}"
    if [[ -n "$files" ]]; then
      echo -e "$files" | xargs -n 1 "${apps[$extension]}" &
    fi
  done
  if [ ${#docsDrive[@]} -gt 0 ]; then
    openDriveDocuments "${docsDrive[@]}"
  fi
}

function openDriveDocuments {
  local filesDrive=("$@") # obtiene los argumentos como un array
  for file in "${filesDrive[@]}"; do
    echo "$file"
    rclone lsjson gdrive:"$file" > tmp.json
    # Extraer el identificador del archivo del archivo temporal utilizando jq
    identificador=$(jq -r '.[0].ID' tmp.json)
    rm tmp.json
    brave "https://docs.google.com/spreadsheets/u/2/d/$identificador/edit"
  done
}

function selectFiles {
  local path="$1"
  local files=("$path"/*)
  local numFiles=0

  for file in "${files[@]}"; do
    if [[ -f "$file" ]]; then
      ((numFiles++))
      echo "$numFiles - ${file##*/}"
    fi
  done
  if ((numFiles == 0)); then
    echo "No hay archivos en $path"
    return 1
  else
    while true; do
      read -p "Seleccione uno o más archivos (separe los números con espacios): " fileNums
      local invalidOption=false
      
      for num in $fileNums; do
        if ((num >= 1 && num <= numFiles)); then
          local count=0
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              ((count++))
              if ((count == num)); then
                selectedFiles+=("$file")
                break
              fi
            fi
          done
        else
          invalidOption=true
          break
        fi
      done
      
      if "$invalidOption"; then
        echo "Opción inválida. Introduzca números entre 1 y $numFiles."
      elif [[ "${#selectedFiles[@]}" == 0 ]]; then
        echo "No se seleccionaron archivos."
      else
        # echo "Archivos seleccionados: "
        # for file in "${selectedFiles[@]}"; do
        #   echo "- ${file##*/}"
        # done
        break
      fi
    done
  fi
}

function cpFiles {

  dirDrive=$(echo "$dirSelected" | sed "s|$HOME/||")
  for file in "$@"; do
    if [ -f "$file" ]; then
      # Obtiene la extensión del archivo
      ext="${file##*.}"

      nameFile=$(basename "$file")
      echo -e "  Copiando $nameFile a $dirSelected"
      cp "$file" "$dirSelected"

      # Verifica si la extensión es .xlsx, .doc o .docx
      if [ "$ext" = "xlsx" ] || [ "$ext" = "doc" ] || [ "$ext" = "docx" ]; then
        echo -e "  Subiendo $nameFile a  en $dirDrive"
        rclone copy "$file" "gdrive:$dirDrive"
      fi
    elif [ -d "$file" ]; then
      cp "$file" "$dirSelected"
      nameDir=$(basename "$file")
      echo -e "Copiando directorio $nameDir a $dirSelected"
    else
      echo "El archivo o directorio $file no existe o no se puede mover."
    fi
  done
}

# function addFiles {
#   if [ $# -eq 0 ]; then
#     echo "La función addFiles requiere al menos un argumento."
#     return 1
#   fi

#   echo "Seleccione una Asignatura"
#   selectDir "$defaultPath"
#   dirSelected="$selectedDir"
#   sameDir=false
#   break_loop=false

#   while [[ "$break_loop" == "false" ]]; do
#     # Verificar si hay directorios en $dirSelected
#     if [[ $(find "$dirSelected" -mindepth 1 -type d | wc -l) -eq 0 ]]; then
#       cpFiles "$@"
#       break
#     fi
#     if [[ "$sameDir" == "false" ]]; then
#       selectDir "$dirSelected" 1
#       dirSelected="$selectedDir"
#     else
#       cpFiles "$@" #aqui iria la funcion cpFiles o createFile
#       break
#     fi
#   done
# }

function addFiles {
  if [ $# -lt 1 ]; then  # Verificar que hay al menos dos argumentos (función y directorio)
    echo "La función addFiles requiere al menos dos argumentos."
    return 1
  fi

  echo "Seleccione una Asignatura"
  selectDir "$defaultPath"
  dirSelected="$selectedDir"
  sameDir=false
  break_loop=false

  # Obtener la función que se va a llamar
  func="$1"
  shift

  while [[ "$break_loop" == "false" ]]; do
    # Verificar si hay directorios en $dirSelected
    if [[ $(find "$dirSelected" -mindepth 1 -type d | wc -l) -eq 0 ]]; then
      # Llamar a la función correspondiente
      case "$func" in
        cpFiles) cpFiles "$@" ;;
        createFiles) createFiles ;;
      esac
      break
    fi
    if [[ "$sameDir" == "false" ]]; then
      selectDir "$dirSelected" 1
      dirSelected="$selectedDir"
    else
      # Llamar a la función correspondiente
      case "$func" in
        cpFiles) cpFiles "$@" ;;
        createFiles) createFiles ;;
      esac
      break
    fi
  done
}

function createFiles {
    touch "$dirSelected/prueba.txt"
}

function selectDir {
  local path="$1"
  local dirs=("$path"/*)
  local numDirs=0

  if [ $# -eq 2 ]; then
    echo "$numDirs - 󱧰 ${selectedDir##*/}"
    for dir in "${dirs[@]}"; do
      if [[ -d "$dir" ]] && [[ ! "$dir" =~ \.\.?$ ]]; then
        ((numDirs++))
        echo "     󱞪 $numDirs - 󰉋 ${dir##*/}"
      fi
    done
  else
    for dir in "${dirs[@]}"; do
      if [[ -d "$dir" ]] && [[ ! "$dir" =~ \.\.?$ ]]; then
        ((numDirs++))
        echo "$numDirs - ${dir##*/}"
      fi
    done
  fi

  if ((numDirs == 0)); then
    echo "No hay directorios en $path"
    return 1
  else
    while true; do
      read -p "Seleccione un directorio (0-$numDirs): " dirNum
      if ((dirNum >= 0 && dirNum <= numDirs)); then
        if ((dirNum == 0)) && [ $# -eq 2 ]; then
          selectedDir="$selectedDir"
          nameSelectedDir=$(basename "$selectedDir")
          sameDir=true
          break
        elif ((dirNum != 0)); then
          local count=0
          for dir in "${dirs[@]}"; do
            if [[ -d "$dir" ]]; then
              ((count++))
              if ((count == dirNum)); then
                selectedDir="$dir"
                sameDir=false
                break
              fi
            fi
          done
          if [[ -d "$selectedDir" ]]; then
            nameSelectedDir=$(basename "$selectedDir")
            break
          else
            echo "La opción seleccionada no es un directorio válido."
          fi
        fi
      else
        echo "Opción inválida. Introduzca un número entre 0 y $numDirs."
      fi
    done
  fi
}

function goToDir {
  echo "Seleccione una Asignatura"
  selectDir "$defaultPath"
  dirSelected="$selectedDir"
  break_loop=false
  while [[ "$break_loop" == "false" ]]; do
      echo "Seleccione una opción:"

      read -p "[1] Buscar otro directorio [2] ir a $dirSelected | default[1]: " option
      case $option in
      1)
        selectDir "$dirSelected"
        dirSelected="$selectedDir"
        ;;
      2)
        cd "$dirSelected"
        exec zsh
        break_loop=true
        break
        ;;
      *)
        selectDir "$dirSelected"
        dirSelected="$selectedDir"
        ;;
    esac
  done
}

# Function to set default path
function setDefaultPath {
  # Check if all parameters are provided
  if [ "$#" -ne 1 ]; then
    echo "Error: to setDefaultPath expecify the path of workspace. use uniUtils --help for more information."
    return 1
  fi
  # Get the absolute path of the directory
  dir=$(readlink -f "$1")

  # Check if uniUtils directory exists
  if [ ! -d "$HOME/.config/uniUtils/" ]; then
    mkdir $HOME/.config/uniUtils/
  fi

  # Check if default path file exists
  if [ ! -f "$HOME/.config/uniUtils/default_path.txt" ]; then
    touch $HOME/.config/uniUtils/default_path.txt
  fi

  # Write default path to file
  echo "$dir" > $HOME/.config/uniUtils/default_path.txt
  echo "Default path set to: $dir"
}


# Function to check if default path file exists and create it if not
function checkDefaultPath {
  # Check if uniUtils directory exists
  if [ ! -d "$HOME/.config/uniUtils/" ]; then
    mkdir $HOME/.config/uniUtils/
  fi

  # Check if default path file exists
  if [ ! -f "$HOME/.config/uniUtils/default_path.txt" ]; then
    touch $HOME/.config/uniUtils/default_path.txt
  fi

  # Check if default path file has a path set
  if [ ! -s "$HOME/.config/uniUtils/default_path.txt" ]; then
    echo "Default path file is empty. Set default path using 'uniUtils --setDefaultPath <path>'"
  fi
}

function showhelp {
  echo "Uso: uniUtils [opción] [argumentos]"
  echo ""
  echo "Descripción:"
  echo "Este script tiene como objetivo facilitar la gestión de archivos para estudiantes universitarios."
  echo ""
  echo "Opciones:"
  echo " registerSubject                Registra una nueva asignatura y crea los directorios para sus unidades y semanas."
  echo " addFiles                       Mueve documentos a un directorio"
  echo " openDocuments                  Abre los documentos de un directorio"
  echo ""
  echo "Argumentos:"
  echo " El comando registerSubject no requiere argumentos adicionales."
  echo " Para el comando addFiles, se deben proporcionar los archivos o directorios a mover, separados por un espacio."
  echo " Para el comando openDocuments, se deben seleccionar la carpeta y los archivos a abrir"
}

# Main function to handle script arguments
main() {
  # Call checkDefaultPath only if not called with setDefaultPath option
  if [ "$1" != "--setDefaultPath" ] && [ "$1" != "-s" ]; then
    checkDefaultPath
  fi
  clear
  # Check if no arguments are passed
  if [ $# -eq 0 ]; then
    echo "No arguments passed. Try 'uniUtils.sh --help' for more information."
  fi
    case "$1" in
      #Registrar una nueva asignatura
      --registerSubject | -rs)
        registerSubject
        ;;

      #Abri un Documento
      --openDocuments | -od)
        openDocuments
        ;;
        
      #Ir a un directorio
      --goToDir | -gd)
        goToDir
        ;;

      #Agregar documentos a una semana examenes o tareas
      --addFiles | -af)
        addFiles cpFiles "${@:2}"
        ;;

      --createFiles | -cf)
        addFiles createFiles
        ;;

      # Set default path
      --setDefaultPath | -s)
        setDefaultPath "$2"
        ;;

      # Show help
      --help | -h)
        showHelp
        exit 0
        ;;
# Invalid option
*)
echo "Invalid option. Try 'uniUtils --help' for more information."
exit 1
;;
esac
shift
}

main "$@"
